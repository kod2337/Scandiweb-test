import { useState } from 'react';
import { Link } from 'react-router-dom';
import { useCart } from '../../context/CartContext';
import { AttributeSet, Price } from '../../types';

// Define the props interface using our shared types
interface ProductCardProps {
  id: string;
  name: string;
  brand: string;
  inStock: boolean;
  gallery: string[];
  prices: Price[];
  attributes: AttributeSet[];
}

const ProductCard = ({ id, name, brand, inStock, gallery, prices, attributes }: ProductCardProps) => {
  const [isHovered, setIsHovered] = useState(false);
  const { addToCart } = useCart();

  // Use first price as default (in a real app, you'd use the selected currency)
  const price = prices[0];

  const handleQuickAddToCart = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (!inStock) return;
    
    // For quick shop, we'll use the first options of each attribute as defaults
    const selectedAttributes: Record<string, string> = {};
    attributes.forEach(attr => {
      if (attr.items && attr.items.length > 0) {
        selectedAttributes[attr.name] = attr.items[0].value;
      }
    });
    
    addToCart({
      id: '', // This will be generated by the cart
      productId: id,
      name,
      brand,
      gallery,
      price,
      quantity: 1,
      attributes, // This needs to be compatible with CartContext's expected type
      selectedAttributes
    });
  };

  return (
    <Link 
      to={`/product/${id}`}
      className="group block relative transition-all duration-300 hover:shadow-md"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      data-testid={`product-${name.toLowerCase().replace(/\s+/g, '-')}`}
    >
      <div className="relative aspect-square overflow-hidden bg-white">
        {/* Product Image */}
        <img 
          src={gallery[0]} 
          alt={name}
          className={`w-full h-full object-cover ${!inStock ? 'opacity-40 grayscale' : ''}`}
        />
        
        {/* Out of Stock Overlay */}
        {!inStock && (
          <div className="absolute inset-0 flex items-center justify-center">
            <span className="text-lg uppercase text-light-text font-medium">Out of Stock</span>
          </div>
        )}
        
        {/* Quick Add Button - only visible when product is in stock and hovered */}
        {inStock && isHovered && (
          <button
            className="absolute bottom-6 right-6 bg-primary text-white p-2 rounded-full shadow-md hover:bg-opacity-90 transition-colors"
            onClick={handleQuickAddToCart}
            aria-label="Add to cart"
          >
            <svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
              />
            </svg>
          </button>
        )}
      </div>
      
      {/* Product Details */}
      <div className="p-4">
        <h3 className="text-base font-normal">{brand} {name}</h3>
        <p className="font-medium text-base mt-1">
          {price.currency.symbol}{price.amount.toFixed(2)}
        </p>
      </div>
    </Link>
  );
};

export default ProductCard; 